# implement L1-MRL
P_vec <- P1*P2
lambda_vec <- 4
eta_vec <- 10^(-4)
mu <- 10^(-8)
P <- dim(H1)[2]
cv.folds <- 2
res_l1mrl <- l1mrl_cv(H_list = H_list, A_list = A_list, Y = Y, P_vec = P_vec,
lambda_vec = lambda_vec, eta_vec = eta_vec, mu = mu,
beta_init_un = beta_init_un,
adaptive_coef = adaptive_coef, P = P, cv.folds = cv.folds)
beta_L1MRL <- res_l1mrl$coef_list
################################################################################
# compared methods
################################################################################
beta_A <- alearning(Y, A1, A2, H1, H2, P1, P2) # A-learning
beta_Q <- qlearning(Y, A1, A2, H1, H2, P1, P2) # Q-learning
beta_O <- olearning(Y, A1, A2, H1, H2, P1, P2) # L1 O-learning
################################################################################
# create summary table
################################################################################
# load testing data
Y_testing <- dat_testing$Y_testing
H_list_testing <- dat_testing$H_list_testing
A_list_testing <- dat_testing$A_list_testing
P_list_testing <- dat_testing$P_list_testing
P_testing <- ifelse(A_list_testing[[1]]==1, P_list_testing[[1]], 1 - P_list_testing[[1]])*ifelse(A_list_testing[[2]]==1, P_list_testing[[2]], 1 - P_list_testing[[2]])
dat_summary <- c()
dat_summary <- rbind(dat_summary, sum_fun(beta_L1MRL, dat_testing, method = 'MRL'))
dat_summary <- rbind(dat_summary, sum_fun(beta_A, dat_testing, method = 'A-learning'))
dat_summary <- rbind(dat_summary, sum_fun(beta_Q, dat_testing, method = 'Q-learning'))
dat_summary <- rbind(dat_summary, sum_fun(beta_O, dat_testing, method = 'L1 O-learning'))
Out <- list(beta_L1MRL = beta_L1MRL,
beta_A = beta_A, beta_Q = beta_Q, beta_O = beta_O,
dat_summary = dat_summary,
lambda_L1MRL_selected = res_l1mrl$lambda,
eta_L1MRL_selected = res_l1mrl$eta,
res_L1MRL = res_l1mrl,
H_list = H_list,
A_list = A_list,
P_list = P_list,
Y = Y, P_vec = P_vec,
beta_init_un = beta_init_un,
adaptive_coef = adaptive_coef)
file_name <- sprintf('L1MRL_SettingI_%s_%s_summary.rds', N, opt$seed)
file_name <- sprintf('L1MRL_SettingI_%s_%s_summary.rds', N, seed)
seed <- 1122
file_name <- sprintf('L1MRL_SettingI_%s_%s_summary.rds', N, seed)
saveRDS(Out, file_name)
file_name <- sprintf('./output/L1MRL_SettingI_%s_%s_summary.rds', N, seed)
saveRDS(Out, file_name)
# setwd('your_data_directory')
setwd('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/output')
library(dplyr) |> suppressMessages()
# cell function
cell_string <- function(l){
l <- l[!is.na(l)]
med <- mean(l) %>% round(3)
dev <- sd(l) %>% round(3)
return(sprintf('%0.3f(%0.3f)', med, dev))
}
file = 'L1MRL_SettingI_200_1122_summary copy.rds'
N <- strsplit(file, '_')
N
N[[1]][3]
para_list <- strsplit(file, '_')[[1]]
file_N <- para_list[3] |> as.numeric()
file_sim <- para_list[1]
file_N
file_sim
file_sim <- para_list[2]
N <- 200
sim <- 'SettingI'
# cell function
cell_string <- function(l){
l <- l[!is.na(l)]
med <- mean(l) |> round(3)
dev <- sd(l) |> round(3)
return(sprintf('%0.3f(%0.3f)', med, dev))
}
#
dat <- c()
for(file in list.files()){
if(!grepl('rds', file)) next
if(!grepl('L1MRL', file)) next
para_list <- strsplit(file, '_')[[1]]
file_N <- para_list[3] |> as.numeric()
file_sim <- para_list[2]
if(file_N!=N) next
if(file_sim!=sim) next
O <- readRDS(file)
dat <- rbind(dat, O$dat_summary)
}
# summary
dat_table <- c()
for(type in unique(dat$method)){
d <- dat |> filter(method == type)
d$method <- c()
l <- list()
l['Method'] <- type
for(k in 1:dim(d)[2]){
s <- cell_string(d[, k])
l[colnames(d)[k]] <- s
}
dat_table <- rbind(dat_table, l |> unlist())
}
dat_table <- as.data.frame(dat_table)
dat_table
setwd('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)')
out <- list()
saveRDS(out, './setting_11_testing.rds')
saveRDS(out, './testing_data/setting_11_testing.rds')
saveRDS(out, './testing_data/setting_11_testing.rds')
path <- '/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/sh'
seed_list <- readRDS(file.path(path, 'seed_list.rds'))
path <- '/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/sh'
seed_list <- readRDS(file.path('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/', 'seed_list.rds'))
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingI', seed, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingI.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
path <- '/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/sh'
seed_list <- readRDS(file.path('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/', 'seed_list.rds'))
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingI', seed, N, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingI.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
path <- '/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/sh'
seed_list <- readRDS(file.path('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/', 'seed_list.rds'))
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingI', seed, N, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingI.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingII', seed, N, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingII.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
path <- '/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/sh'
seed_list <- readRDS(file.path('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/', 'seed_list.rds'))
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingI', seed, N, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingI.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingII', seed, N, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingII.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
path <- '/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/sh'
seed_list <- readRDS(file.path('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)/', 'seed_list.rds'))
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingI', N, seed, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingI.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
for(seed in seed_list){
for(N in c(200, 400)){
file_name <- paste('SettingII', N, seed, sep = '_')
file_path <- file.path(path, paste(file_name, '.sh', sep = ''))
fileConn <- file(file_path)
writeLines(c('#!/bin/bash',
'',
'#SBATCH -p general',
'#SBATCH -N 1',
sprintf('#SBATCH --mem=%dg', 2),
sprintf('#SBATCH -n %d', 1),
'#SBATCH -t 2-',
sprintf('#SBATCH --job-name=%s',  file_name),
'',
'module add r/4.1.3',
'',
sprintf('Rscript main_settingII.R --seed %s --N %s > %s',
seed,
N,
paste(file_name, '.out', sep = ''))),
fileConn, sep = '\n')
close(fileConn)
}
}
setwd('change_to_your_own_working_directory')
setwd('/Users/mochuanliu/Documents/Zeng/br_3/Rcode/test_4_trial(git)')
source('./optim_functions.R')    # auxiliary functions of L1-MRL
source('./compared_methods.R')  # functions for conducting compared methods
source('./summary_functions.R') # auxiliary functions for summarizing the simulations results
# # set up random seed when simulation is conducted in parallel
# # using Slurm
# suppressPackageStartupMessages(library(optparse))
# option_list <- list(
#   make_option(c("--seed"), type  = "double", default = 1234,
#   make_option(c("--N"), type  = "double", default = 200)
# )
# opt <- parse_args(OptionParser(option_list = option_list))
# seed <- opt$seed
# N <- opt$N
seed <- 1122
N <- 200        # size of the training data
# set random seed
set.seed(seed)
# load simulation model and testing data
dat_testing <- readRDS('./testing_data/settingII_testing.rds')
s0 <- dat_testing$s0
s1 <- dat_testing$s1
s2 <- dat_testing$s2
library(truncnorm) |> suppressMessages()
library(DTRlearn2) |> suppressMessages()
################################################################################
# generate training data
################################################################################
# baseline covariates
Sigma <- matrix(0, ncol = 12, nrow = 12)
for(i in 1:12){
for(j in 1:12){
if(i<=6&j<=6&i!=j){
Sigma[i,j] <- 0.2
}
if(i==j){
Sigma[i,j] <- 1
}
}
}
L <- t(chol(Sigma))
Z <- matrix(0, nrow = N, ncol = 12)
for(n in 1:N){
Z[n,] <- L%*%matrix(rnorm(12, 0, 1), ncol = 1)
}
# treatment randomization
X <- runif(N, 0, 1)
X_intercept <- rnorm(N, 0, 1)
X1 <- Z[,1]*X + X_intercept*1 + rnorm(N, 0, 1)
# stage 1 treatment
P1_true <- X1/3
P1_true <- exp(P1_true)/(1+exp(P1_true))
A1 <- rep(NA, N)
for(n in 1:N){
A1[n] <- rbinom(1, 1, P1_true[n])
}
A1 <- (A1-0.5)*2
X2 <- Z[,1]*X + X_intercept*(1 + A1/2) + rnorm(N, 0, 1)
# stage 2 treatment
P2_true <- X2/3 + A1/2
P2_true <- exp(P2_true)/(1+exp(P2_true))
A2 <- rep(NA, N)
for(n in 1:N){
A2[n] <- rbinom(1, 1, P2_true[n])
}
A2 <- (A2-0.5)*2
W <- runif(N, 0, 1)
W_intercept <- rnorm(N, 0, 1)
W1 <- Z[,1]*W + W_intercept*1 + rnorm(N, 0, 1)
W2 <- Z[,1]*W + W_intercept*(1 + A1/2) + rnorm(N, 0, 1)
G <- runif(N, 0, 1)
G_intercept <- rnorm(N, 0, 1)
G1 <- Z[,1]*G + G_intercept*1 + rnorm(N, 0, 1)
G2 <- Z[,1]*G + G_intercept*(1 + A1/2) + rnorm(N, 0, 1)
# create feature lists
H1 <- cbind(X1, W1, G1, Z) |> as.matrix()
H2 <- cbind(X2, W2, G2, Z, A1) |> as.matrix()
p1 <- dim(H1)[2]
p2 <- dim(H2)[2]
H_list <- list(H1 |> scale(), H2 |> scale())
A_list <- list(A1, A2)
# generate reward
Y <- rep(NA, N)
S0 <- s0(Z, X1)
S1 <- s1(Z, X1)
S2 <- s2(Z, X2)
for(n in 1:N){
Y[n] <- S0[n] + 2*A1[n]*S1[n] + 2*A2[n]*S2[n] + rnorm(1, 0, 1)
}
H1 <- H1 |> scale()
H2 <- H2 |> scale()
################################################################################
# Estimate propensity score via Lasso Logistic regression
################################################################################
cv.model2 <- cv.glmnet(x = H2, y = factor(A2), family = 'binomial', type = 'deviance', alpha = 1)
lambda2 <- cv.model2$lambda.min
model2 <-glmnet(x = H2, y = factor(A2), family = 'binomial', alpha = 1, lambda = lambda2)
P2_est <- predict(model2, type = 'response', newx = H2) |> as.vector()
P2 <- ifelse(A2==1, P2_est, 1-P2_est)
cv.model1 <- cv.glmnet(x = H1, y = factor(A1), family = 'binomial', type = 'deviance', alpha = 1)
lambda1 <- cv.model1$lambda.min
model1 <-glmnet(x = H1, y = factor(A1), family = 'binomial', alpha = 1, lambda = lambda1)
P1_est <- predict(model1, type = 'response', newx = H1) |> as.vector()
P1 <- ifelse(A1==1, P1_est, 1-P1_est)
P_list <- list(P1, P2)
################################################################################
# L1-MRL
################################################################################
# calculate the L1-MRL adaptive coefficient through owl
res_O <- try(owl(H = H_list, AA = A_list, RR = list(rep(0, N), Y), n = N, K = 2, pi = list(P1, P2), augment = TRUE, c = 2^(-2:2))
, silent = TRUE)
beta1 <- res_O$stage1$beta |> matrix(ncol = 1)
beta01 <- res_O$stage1$beta0
beta2 <- res_O$stage2$beta |> matrix(ncol = 1)
beta02 <- res_O$stage2$beta0
beta_init_un <- list(beta = list(beta1, beta2),
beta0 = list(beta01, beta02))
beta_O <- beta_init_un
T <- length(H_list)
P <- ncol(H_list[[1]])
adaptive_coef <- c()
vec_constant <- c()
for(t in 1:T){
vec_constant[t] <- norm(beta_init_un$beta[[t]][1:P], '2')
}
for(p in 1:P){
vec <- c()
for(t in 1:T){
vec <- c(vec, beta_init_un$beta[[t]][p]/vec_constant[t])
}
adaptive_coef <- c(adaptive_coef, norm(vec, '2'))
}
# implement L1-MRL
P_vec <- P1*P2
lambda_vec <- 2
eta_vec <- 10^(-4)
mu <- 10^(-8)
P <- dim(H1)[2]
cv.folds <- 2
res_l1mrl <- l1mrl_cv(H_list = H_list, A_list = A_list, Y = Y, P_vec = P_vec,
lambda_vec = lambda_vec, eta_vec = eta_vec, mu = mu,
beta_init_un = beta_init_un,
adaptive_coef = adaptive_coef, P = P, cv.folds = cv.folds)
beta_L1MRL <- res_l1mrl$coef_list
################################################################################
# compared methods
################################################################################
beta_A <- alearning(Y, A1, A2, H1, H2, P1, P2) # A-learning
beta_Q <- qlearning(Y, A1, A2, H1, H2, P1, P2) # Q-learning
beta_O <- olearning(Y, A1, A2, H1, H2, P1, P2) # L1 O-learning
beta_WLS <- wl(Y, A1, A2, H1, H2, P1, P2)      # WLS
################################################################################
# create summary table
################################################################################
# load testing data
Y_testing <- dat_testing$Y_testing
H_list_testing <- dat_testing$H_list_testing
A_list_testing <- dat_testing$A_list_testing
P_list_testing <- dat_testing$P_list_testing
P_testing <- ifelse(A_list_testing[[1]]==1, P_list_testing[[1]], 1 - P_list_testing[[1]])*ifelse(A_list_testing[[2]]==1, P_list_testing[[2]], 1 - P_list_testing[[2]])
dat_summary <- c()
dat_summary <- rbind(dat_summary, sum_fun(beta_L1MRL, dat_testing, method = 'MRL'))
dat_summary <- rbind(dat_summary, sum_fun(beta_A, dat_testing, method = 'A-learning'))
beta_A
dat_summary
beta_L1MRL,
beta_L1MRL
dat_testing
dat_summary <- c()
dat_summary <- rbind(dat_summary, sum_fun(beta_L1MRL, dat_testing, method = 'L1MRL'))
dat_summary <- rbind(dat_summary, sum_fun(beta_A, dat_testing, method = 'A-learning'))
source('./summary_functions.R')
dat_summary <- c()
dat_summary <- rbind(dat_summary, sum_fun(beta_L1MRL, dat_testing, method = 'L1MRL'))
dat_summary <- rbind(dat_summary, sum_fun(beta_A, dat_testing, method = 'A-learning'))
dat_summary <- rbind(dat_summary, sum_fun(beta_Q, dat_testing, method = 'Q-learning'))
dat_summary <- rbind(dat_summary, sum_fun(beta_O, dat_testing, method = 'L1 O-learning'))
Out <- list(beta_L1MRL = beta_L1MRL,
beta_A = beta_A, beta_Q = beta_Q, beta_O = beta_O,
dat_summary = dat_summary,
lambda_L1MRL_selected = res_l1mrl$lambda,
eta_L1MRL_selected = res_l1mrl$eta,
res_L1MRL = res_l1mrl,
H_list = H_list,
A_list = A_list,
P_list = P_list,
Y = Y, P_vec = P_vec,
beta_init_un = beta_init_un,
adaptive_coef = adaptive_coef)
file_name <- sprintf('./output/L1MRL_SettingII_%s_%s_summary.rds', N, seed)
saveRDS(Out, file_name)
out <-()
out <- c()
saveRDS(out, './testing_data/settingII_testing.rds')
